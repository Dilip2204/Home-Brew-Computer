// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/10/2020 18:38:15"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          dffe32
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module dffe32_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clr;
reg [31:0] data_in;
reg write_enable;
// wires                                               
wire [31:0] q_out;

// assign statements (if any)                          
dffe32 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clr(clr),
	.data_in(data_in),
	.q_out(q_out),
	.write_enable(write_enable)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// clr
initial
begin
	clr = 1'b0;
	clr = #80000 1'b1;
	clr = #20000 1'b0;
	clr = #20000 1'b1;
	clr = #20000 1'b0;
end 

// write_enable
initial
begin
	write_enable = 1'b1;
	write_enable = #20000 1'b0;
	write_enable = #20000 1'b1;
	write_enable = #20000 1'b0;
	write_enable = #60000 1'b1;
	write_enable = #20000 1'b0;
	write_enable = #20000 1'b1;
	write_enable = #100000 1'b0;
end 
// data_in[ 31 ]
initial
begin
	data_in[31] = 1'b1;
	data_in[31] = #40000 1'b0;
	data_in[31] = #200000 1'b1;
	data_in[31] = #200000 1'b0;
	data_in[31] = #40000 1'b1;
	data_in[31] = #40000 1'b0;
	data_in[31] = #40000 1'b1;
	data_in[31] = #40000 1'b0;
	data_in[31] = #40000 1'b1;
	data_in[31] = #40000 1'b0;
	data_in[31] = #200000 1'b1;
end 
// data_in[ 30 ]
initial
begin
	data_in[30] = 1'b0;
	data_in[30] = #120000 1'b1;
	data_in[30] = #80000 1'b0;
	data_in[30] = #120000 1'b1;
	data_in[30] = #120000 1'b0;
	data_in[30] = #240000 1'b1;
	data_in[30] = #40000 1'b0;
	data_in[30] = #40000 1'b1;
	data_in[30] = #160000 1'b0;
	data_in[30] = #40000 1'b1;
end 
// data_in[ 29 ]
initial
begin
	data_in[29] = 1'b1;
	data_in[29] = #40000 1'b0;
	data_in[29] = #80000 1'b1;
	data_in[29] = #120000 1'b0;
	data_in[29] = #80000 1'b1;
	data_in[29] = #120000 1'b0;
	data_in[29] = #120000 1'b1;
	data_in[29] = #80000 1'b0;
	data_in[29] = #40000 1'b1;
	data_in[29] = #40000 1'b0;
	data_in[29] = #120000 1'b1;
	data_in[29] = #40000 1'b0;
	data_in[29] = #40000 1'b1;
	data_in[29] = #40000 1'b0;
end 
// data_in[ 28 ]
initial
begin
	data_in[28] = 1'b1;
	data_in[28] = #40000 1'b0;
	data_in[28] = #40000 1'b1;
	data_in[28] = #80000 1'b0;
	data_in[28] = #80000 1'b1;
	data_in[28] = #40000 1'b0;
	data_in[28] = #80000 1'b1;
	data_in[28] = #40000 1'b0;
	data_in[28] = #40000 1'b1;
	data_in[28] = #80000 1'b0;
	data_in[28] = #80000 1'b1;
	data_in[28] = #80000 1'b0;
	data_in[28] = #40000 1'b1;
	data_in[28] = #40000 1'b0;
	data_in[28] = #80000 1'b1;
	data_in[28] = #80000 1'b0;
end 
// data_in[ 27 ]
initial
begin
	data_in[27] = 1'b0;
	data_in[27] = #80000 1'b1;
	data_in[27] = #120000 1'b0;
	data_in[27] = #80000 1'b1;
	data_in[27] = #80000 1'b0;
	data_in[27] = #80000 1'b1;
	data_in[27] = #120000 1'b0;
	data_in[27] = #40000 1'b1;
	data_in[27] = #120000 1'b0;
	data_in[27] = #40000 1'b1;
	data_in[27] = #40000 1'b0;
	data_in[27] = #120000 1'b1;
	data_in[27] = #40000 1'b0;
end 
// data_in[ 26 ]
initial
begin
	data_in[26] = 1'b0;
	data_in[26] = #40000 1'b1;
	data_in[26] = #80000 1'b0;
	data_in[26] = #200000 1'b1;
	data_in[26] = #40000 1'b0;
	data_in[26] = #120000 1'b1;
	data_in[26] = #40000 1'b0;
	data_in[26] = #160000 1'b1;
	data_in[26] = #40000 1'b0;
	data_in[26] = #40000 1'b1;
	data_in[26] = #120000 1'b0;
end 
// data_in[ 25 ]
initial
begin
	data_in[25] = 1'b0;
	data_in[25] = #240000 1'b1;
	data_in[25] = #160000 1'b0;
	data_in[25] = #80000 1'b1;
	data_in[25] = #40000 1'b0;
	data_in[25] = #200000 1'b1;
	data_in[25] = #40000 1'b0;
	data_in[25] = #120000 1'b1;
	data_in[25] = #80000 1'b0;
end 
// data_in[ 24 ]
initial
begin
	data_in[24] = 1'b1;
	data_in[24] = #40000 1'b0;
	data_in[24] = #40000 1'b1;
	data_in[24] = #40000 1'b0;
	data_in[24] = #280000 1'b1;
	data_in[24] = #200000 1'b0;
	data_in[24] = #40000 1'b1;
	data_in[24] = #120000 1'b0;
	data_in[24] = #40000 1'b1;
	data_in[24] = #40000 1'b0;
	data_in[24] = #40000 1'b1;
	data_in[24] = #80000 1'b0;
end 
// data_in[ 23 ]
initial
begin
	data_in[23] = 1'b1;
	data_in[23] = #40000 1'b0;
	data_in[23] = #80000 1'b1;
	data_in[23] = #80000 1'b0;
	data_in[23] = #160000 1'b1;
	data_in[23] = #80000 1'b0;
	data_in[23] = #40000 1'b1;
	data_in[23] = #80000 1'b0;
	data_in[23] = #40000 1'b1;
	data_in[23] = #120000 1'b0;
	data_in[23] = #240000 1'b1;
end 
// data_in[ 22 ]
initial
begin
	data_in[22] = 1'b1;
	data_in[22] = #40000 1'b0;
	data_in[22] = #160000 1'b1;
	data_in[22] = #80000 1'b0;
	data_in[22] = #80000 1'b1;
	data_in[22] = #160000 1'b0;
	data_in[22] = #40000 1'b1;
	data_in[22] = #40000 1'b0;
	data_in[22] = #200000 1'b1;
	data_in[22] = #80000 1'b0;
	data_in[22] = #40000 1'b1;
	data_in[22] = #40000 1'b0;
end 
// data_in[ 21 ]
initial
begin
	data_in[21] = 1'b1;
	data_in[21] = #80000 1'b0;
	data_in[21] = #80000 1'b1;
	data_in[21] = #40000 1'b0;
	data_in[21] = #40000 1'b1;
	data_in[21] = #40000 1'b0;
	data_in[21] = #80000 1'b1;
	data_in[21] = #80000 1'b0;
	data_in[21] = #40000 1'b1;
	data_in[21] = #120000 1'b0;
	data_in[21] = #120000 1'b1;
	data_in[21] = #40000 1'b0;
	data_in[21] = #40000 1'b1;
	data_in[21] = #40000 1'b0;
	data_in[21] = #40000 1'b1;
	data_in[21] = #40000 1'b0;
end 
// data_in[ 20 ]
initial
begin
	data_in[20] = 1'b0;
	data_in[20] = #40000 1'b1;
	data_in[20] = #80000 1'b0;
	data_in[20] = #120000 1'b1;
	data_in[20] = #120000 1'b0;
	data_in[20] = #200000 1'b1;
	data_in[20] = #320000 1'b0;
	data_in[20] = #40000 1'b1;
	data_in[20] = #40000 1'b0;
end 
// data_in[ 19 ]
initial
begin
	data_in[19] = 1'b0;
	data_in[19] = #160000 1'b1;
	data_in[19] = #80000 1'b0;
	data_in[19] = #40000 1'b1;
	data_in[19] = #120000 1'b0;
	data_in[19] = #40000 1'b1;
	data_in[19] = #40000 1'b0;
	data_in[19] = #80000 1'b1;
	data_in[19] = #80000 1'b0;
	data_in[19] = #120000 1'b1;
	data_in[19] = #40000 1'b0;
	data_in[19] = #80000 1'b1;
	data_in[19] = #80000 1'b0;
end 
// data_in[ 18 ]
initial
begin
	data_in[18] = 1'b1;
	data_in[18] = #40000 1'b0;
	data_in[18] = #80000 1'b1;
	data_in[18] = #40000 1'b0;
	data_in[18] = #280000 1'b1;
	data_in[18] = #120000 1'b0;
	data_in[18] = #40000 1'b1;
	data_in[18] = #80000 1'b0;
	data_in[18] = #80000 1'b1;
	data_in[18] = #40000 1'b0;
	data_in[18] = #40000 1'b1;
	data_in[18] = #120000 1'b0;
end 
// data_in[ 17 ]
initial
begin
	data_in[17] = 1'b1;
	data_in[17] = #80000 1'b0;
	data_in[17] = #40000 1'b1;
	data_in[17] = #120000 1'b0;
	data_in[17] = #80000 1'b1;
	data_in[17] = #40000 1'b0;
	data_in[17] = #80000 1'b1;
	data_in[17] = #40000 1'b0;
	data_in[17] = #40000 1'b1;
	data_in[17] = #80000 1'b0;
	data_in[17] = #80000 1'b1;
	data_in[17] = #80000 1'b0;
	data_in[17] = #80000 1'b1;
	data_in[17] = #80000 1'b0;
end 
// data_in[ 16 ]
initial
begin
	data_in[16] = 1'b0;
	data_in[16] = #80000 1'b1;
	data_in[16] = #80000 1'b0;
	data_in[16] = #80000 1'b1;
	data_in[16] = #40000 1'b0;
	data_in[16] = #40000 1'b1;
	data_in[16] = #40000 1'b0;
	data_in[16] = #80000 1'b1;
	data_in[16] = #200000 1'b0;
	data_in[16] = #80000 1'b1;
	data_in[16] = #80000 1'b0;
	data_in[16] = #40000 1'b1;
	data_in[16] = #40000 1'b0;
	data_in[16] = #40000 1'b1;
end 
// data_in[ 15 ]
initial
begin
	data_in[15] = 1'b1;
	data_in[15] = #200000 1'b0;
	data_in[15] = #40000 1'b1;
	data_in[15] = #80000 1'b0;
	data_in[15] = #40000 1'b1;
	data_in[15] = #120000 1'b0;
	data_in[15] = #80000 1'b1;
	data_in[15] = #80000 1'b0;
	data_in[15] = #80000 1'b1;
	data_in[15] = #40000 1'b0;
	data_in[15] = #40000 1'b1;
	data_in[15] = #120000 1'b0;
end 
// data_in[ 14 ]
initial
begin
	data_in[14] = 1'b0;
	data_in[14] = #80000 1'b1;
	data_in[14] = #40000 1'b0;
	data_in[14] = #160000 1'b1;
	data_in[14] = #80000 1'b0;
	data_in[14] = #40000 1'b1;
	data_in[14] = #80000 1'b0;
	data_in[14] = #80000 1'b1;
	data_in[14] = #160000 1'b0;
	data_in[14] = #80000 1'b1;
	data_in[14] = #40000 1'b0;
	data_in[14] = #40000 1'b1;
	data_in[14] = #40000 1'b0;
end 
// data_in[ 13 ]
initial
begin
	data_in[13] = 1'b0;
	data_in[13] = #40000 1'b1;
	data_in[13] = #40000 1'b0;
	data_in[13] = #120000 1'b1;
	data_in[13] = #40000 1'b0;
	data_in[13] = #40000 1'b1;
	data_in[13] = #80000 1'b0;
	data_in[13] = #120000 1'b1;
	data_in[13] = #160000 1'b0;
	data_in[13] = #40000 1'b1;
	data_in[13] = #80000 1'b0;
	data_in[13] = #80000 1'b1;
	data_in[13] = #40000 1'b0;
	data_in[13] = #40000 1'b1;
	data_in[13] = #40000 1'b0;
end 
// data_in[ 12 ]
initial
begin
	data_in[12] = 1'b0;
	data_in[12] = #120000 1'b1;
	data_in[12] = #80000 1'b0;
	data_in[12] = #80000 1'b1;
	data_in[12] = #80000 1'b0;
	data_in[12] = #80000 1'b1;
	data_in[12] = #40000 1'b0;
	data_in[12] = #280000 1'b1;
	data_in[12] = #200000 1'b0;
end 
// data_in[ 11 ]
initial
begin
	data_in[11] = 1'b0;
	data_in[11] = #160000 1'b1;
	data_in[11] = #40000 1'b0;
	data_in[11] = #40000 1'b1;
	data_in[11] = #40000 1'b0;
	data_in[11] = #40000 1'b1;
	data_in[11] = #120000 1'b0;
	data_in[11] = #40000 1'b1;
	data_in[11] = #40000 1'b0;
	data_in[11] = #120000 1'b1;
	data_in[11] = #80000 1'b0;
	data_in[11] = #40000 1'b1;
	data_in[11] = #40000 1'b0;
end 
// data_in[ 10 ]
initial
begin
	data_in[10] = 1'b0;
	data_in[10] = #40000 1'b1;
	data_in[10] = #80000 1'b0;
	data_in[10] = #40000 1'b1;
	data_in[10] = #40000 1'b0;
	data_in[10] = #120000 1'b1;
	data_in[10] = #120000 1'b0;
	data_in[10] = #320000 1'b1;
	data_in[10] = #40000 1'b0;
	data_in[10] = #40000 1'b1;
	data_in[10] = #40000 1'b0;
end 
// data_in[ 9 ]
initial
begin
	data_in[9] = 1'b0;
	data_in[9] = #40000 1'b1;
	data_in[9] = #40000 1'b0;
	data_in[9] = #160000 1'b1;
	data_in[9] = #40000 1'b0;
	data_in[9] = #280000 1'b1;
	data_in[9] = #80000 1'b0;
	data_in[9] = #40000 1'b1;
	data_in[9] = #120000 1'b0;
	data_in[9] = #80000 1'b1;
end 
// data_in[ 8 ]
initial
begin
	data_in[8] = 1'b1;
	data_in[8] = #240000 1'b0;
	data_in[8] = #80000 1'b1;
	data_in[8] = #40000 1'b0;
	data_in[8] = #40000 1'b1;
	data_in[8] = #40000 1'b0;
	data_in[8] = #40000 1'b1;
	data_in[8] = #40000 1'b0;
	data_in[8] = #80000 1'b1;
	data_in[8] = #40000 1'b0;
	data_in[8] = #160000 1'b1;
	data_in[8] = #80000 1'b0;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b0;
	data_in[7] = #80000 1'b1;
	data_in[7] = #120000 1'b0;
	data_in[7] = #160000 1'b1;
	data_in[7] = #40000 1'b0;
	data_in[7] = #160000 1'b1;
	data_in[7] = #80000 1'b0;
	data_in[7] = #40000 1'b1;
	data_in[7] = #40000 1'b0;
	data_in[7] = #80000 1'b1;
	data_in[7] = #40000 1'b0;
	data_in[7] = #40000 1'b1;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b1;
	data_in[6] = #120000 1'b0;
	data_in[6] = #40000 1'b1;
	data_in[6] = #40000 1'b0;
	data_in[6] = #120000 1'b1;
	data_in[6] = #80000 1'b0;
	data_in[6] = #80000 1'b1;
	data_in[6] = #40000 1'b0;
	data_in[6] = #160000 1'b1;
	data_in[6] = #160000 1'b0;
end 
// data_in[ 5 ]
initial
begin
	data_in[5] = 1'b1;
	data_in[5] = #80000 1'b0;
	data_in[5] = #80000 1'b1;
	data_in[5] = #40000 1'b0;
	data_in[5] = #40000 1'b1;
	data_in[5] = #40000 1'b0;
	data_in[5] = #40000 1'b1;
	data_in[5] = #80000 1'b0;
	data_in[5] = #40000 1'b1;
	data_in[5] = #40000 1'b0;
	data_in[5] = #80000 1'b1;
	data_in[5] = #40000 1'b0;
	data_in[5] = #40000 1'b1;
	data_in[5] = #40000 1'b0;
	data_in[5] = #160000 1'b1;
end 
// data_in[ 4 ]
initial
begin
	data_in[4] = 1'b0;
	data_in[4] = #160000 1'b1;
	data_in[4] = #40000 1'b0;
	data_in[4] = #80000 1'b1;
	data_in[4] = #120000 1'b0;
	data_in[4] = #160000 1'b1;
	data_in[4] = #80000 1'b0;
	data_in[4] = #40000 1'b1;
	data_in[4] = #160000 1'b0;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b0;
	data_in[3] = #40000 1'b1;
	data_in[3] = #80000 1'b0;
	data_in[3] = #40000 1'b1;
	data_in[3] = #40000 1'b0;
	data_in[3] = #40000 1'b1;
	data_in[3] = #120000 1'b0;
	data_in[3] = #120000 1'b1;
	data_in[3] = #40000 1'b0;
	data_in[3] = #40000 1'b1;
	data_in[3] = #80000 1'b0;
	data_in[3] = #40000 1'b1;
	data_in[3] = #40000 1'b0;
	data_in[3] = #40000 1'b1;
	data_in[3] = #40000 1'b0;
	data_in[3] = #80000 1'b1;
	data_in[3] = #40000 1'b0;
	data_in[3] = #40000 1'b1;
end 
// data_in[ 2 ]
initial
begin
	data_in[2] = 1'b1;
	data_in[2] = #40000 1'b0;
	data_in[2] = #80000 1'b1;
	data_in[2] = #80000 1'b0;
	data_in[2] = #120000 1'b1;
	data_in[2] = #40000 1'b0;
	data_in[2] = #200000 1'b1;
	data_in[2] = #40000 1'b0;
	data_in[2] = #160000 1'b1;
	data_in[2] = #80000 1'b0;
	data_in[2] = #40000 1'b1;
	data_in[2] = #40000 1'b0;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b0;
	data_in[1] = #40000 1'b1;
	data_in[1] = #80000 1'b0;
	data_in[1] = #80000 1'b1;
	data_in[1] = #40000 1'b0;
	data_in[1] = #40000 1'b1;
	data_in[1] = #40000 1'b0;
	data_in[1] = #40000 1'b1;
	data_in[1] = #120000 1'b0;
	data_in[1] = #80000 1'b1;
	data_in[1] = #80000 1'b0;
	data_in[1] = #40000 1'b1;
	data_in[1] = #80000 1'b0;
	data_in[1] = #40000 1'b1;
	data_in[1] = #40000 1'b0;
	data_in[1] = #80000 1'b1;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b1;
	data_in[0] = #40000 1'b0;
	data_in[0] = #80000 1'b1;
	data_in[0] = #40000 1'b0;
	data_in[0] = #40000 1'b1;
	data_in[0] = #40000 1'b0;
	data_in[0] = #80000 1'b1;
	data_in[0] = #40000 1'b0;
	data_in[0] = #120000 1'b1;
	data_in[0] = #40000 1'b0;
	data_in[0] = #40000 1'b1;
	data_in[0] = #40000 1'b0;
	data_in[0] = #120000 1'b1;
	data_in[0] = #40000 1'b0;
	data_in[0] = #40000 1'b1;
	data_in[0] = #120000 1'b0;
end 
endmodule

