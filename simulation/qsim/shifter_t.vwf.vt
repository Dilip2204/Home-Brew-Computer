// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/03/2020 11:14:07"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          shifter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module shifter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg arith;
reg [31:0] data;
reg right;
reg [31:0] sa;
// wires                                               
wire [31:0] result;

// assign statements (if any)                          
shifter i1 (
// port map - connection between master ports and signals/registers   
	.arith(arith),
	.data(data),
	.result(result),
	.right(right),
	.sa(sa)
);
initial 
begin 
#2000000 $finish;
end 

// arith
initial
begin
	arith = 1'b0;
	arith = #550000 1'b1;
	arith = #260000 1'b0;
	arith = #10000 1'b1;
	arith = #50000 1'b0;
	arith = #250000 1'b1;
	arith = #50000 1'b0;
	arith = #150000 1'b1;
	arith = #50000 1'b0;
	arith = #50000 1'b1;
	arith = #50000 1'b0;
	arith = #50000 1'b1;
	arith = #20000 1'b0;
end 

// right
initial
begin
	right = 1'b0;
	right = #810000 1'b1;
	right = #189000 1'b0;
	right = #1000 1'b1;
	right = #540000 1'b0;
end 
// data[ 31 ]
initial
begin
	data[31] = 1'b0;
	data[31] = #300000 1'b1;
	data[31] = #250000 1'b0;
	data[31] = #300000 1'b1;
	data[31] = #100000 1'b0;
	data[31] = #450000 1'b1;
	data[31] = #100000 1'b0;
end 
// data[ 30 ]
initial
begin
	data[30] = 1'b0;
	data[30] = #300000 1'b1;
	data[30] = #250000 1'b0;
	data[30] = #130000 1'b1;
	data[30] = #120000 1'b0;
	data[30] = #50000 1'b1;
	data[30] = #150000 1'b0;
	data[30] = #150000 1'b1;
	data[30] = #50000 1'b0;
	data[30] = #50000 1'b1;
	data[30] = #150000 1'b0;
	data[30] = #50000 1'b1;
	data[30] = #90000 1'b0;
end 
// data[ 29 ]
initial
begin
	data[29] = 1'b0;
	data[29] = #680000 1'b1;
	data[29] = #120000 1'b0;
	data[29] = #100000 1'b1;
	data[29] = #100000 1'b0;
	data[29] = #50000 1'b1;
	data[29] = #50000 1'b0;
	data[29] = #50000 1'b1;
	data[29] = #50000 1'b0;
	data[29] = #50000 1'b1;
	data[29] = #50000 1'b0;
	data[29] = #100000 1'b1;
	data[29] = #140000 1'b0;
end 
// data[ 28 ]
initial
begin
	data[28] = 1'b1;
	data[28] = #300000 1'b0;
	data[28] = #650000 1'b1;
	data[28] = #50000 1'b0;
	data[28] = #50000 1'b1;
	data[28] = #100000 1'b0;
	data[28] = #50000 1'b1;
	data[28] = #50000 1'b0;
	data[28] = #50000 1'b1;
	data[28] = #100000 1'b0;
	data[28] = #100000 1'b1;
	data[28] = #40000 1'b0;
end 
// data[ 27 ]
initial
begin
	data[27] = 1'b1;
	data[27] = #550000 1'b0;
	data[27] = #130000 1'b1;
	data[27] = #170000 1'b0;
	data[27] = #200000 1'b1;
	data[27] = #100000 1'b0;
	data[27] = #100000 1'b1;
	data[27] = #50000 1'b0;
	data[27] = #50000 1'b1;
	data[27] = #190000 1'b0;
end 
// data[ 26 ]
initial
begin
	data[26] = 1'b1;
	data[26] = #550000 1'b0;
	data[26] = #350000 1'b1;
	data[26] = #50000 1'b0;
	data[26] = #100000 1'b1;
	data[26] = #50000 1'b0;
	data[26] = #150000 1'b1;
	data[26] = #50000 1'b0;
	data[26] = #50000 1'b1;
	data[26] = #50000 1'b0;
	data[26] = #50000 1'b1;
	data[26] = #50000 1'b0;
end 
// data[ 25 ]
initial
begin
	data[25] = 1'b1;
	data[25] = #300000 1'b0;
	data[25] = #550000 1'b1;
	data[25] = #50000 1'b0;
	data[25] = #50000 1'b1;
	data[25] = #50000 1'b0;
	data[25] = #300000 1'b1;
	data[25] = #100000 1'b0;
	data[25] = #50000 1'b1;
	data[25] = #50000 1'b0;
end 
// data[ 24 ]
initial
begin
	data[24] = 1'b1;
	data[24] = #550000 1'b0;
	data[24] = #400000 1'b1;
	data[24] = #100000 1'b0;
	data[24] = #150000 1'b1;
	data[24] = #50000 1'b0;
	data[24] = #100000 1'b1;
	data[24] = #50000 1'b0;
	data[24] = #50000 1'b1;
	data[24] = #50000 1'b0;
end 
// data[ 23 ]
initial
begin
	data[23] = 1'b1;
	data[23] = #300000 1'b0;
	data[23] = #380000 1'b1;
	data[23] = #220000 1'b0;
	data[23] = #50000 1'b1;
	data[23] = #100000 1'b0;
	data[23] = #200000 1'b1;
	data[23] = #50000 1'b0;
	data[23] = #50000 1'b1;
	data[23] = #190000 1'b0;
end 
// data[ 22 ]
initial
begin
	data[22] = 1'b0;
	data[22] = #800000 1'b1;
	data[22] = #50000 1'b0;
	data[22] = #100000 1'b1;
	data[22] = #50000 1'b0;
	data[22] = #50000 1'b1;
	data[22] = #150000 1'b0;
	data[22] = #200000 1'b1;
	data[22] = #140000 1'b0;
end 
// data[ 21 ]
initial
begin
	data[21] = 1'b0;
	data[21] = #680000 1'b1;
	data[21] = #120000 1'b0;
	data[21] = #100000 1'b1;
	data[21] = #50000 1'b0;
	data[21] = #50000 1'b1;
	data[21] = #100000 1'b0;
	data[21] = #50000 1'b1;
	data[21] = #100000 1'b0;
	data[21] = #50000 1'b1;
	data[21] = #100000 1'b0;
	data[21] = #100000 1'b1;
	data[21] = #40000 1'b0;
end 
// data[ 20 ]
initial
begin
	data[20] = 1'b0;
	data[20] = #800000 1'b1;
	data[20] = #50000 1'b0;
	data[20] = #100000 1'b1;
	data[20] = #150000 1'b0;
	data[20] = #250000 1'b1;
	data[20] = #50000 1'b0;
	data[20] = #50000 1'b1;
	data[20] = #50000 1'b0;
end 
// data[ 19 ]
initial
begin
	data[19] = 1'b0;
	data[19] = #900000 1'b1;
	data[19] = #100000 1'b0;
	data[19] = #100000 1'b1;
	data[19] = #150000 1'b0;
	data[19] = #100000 1'b1;
	data[19] = #50000 1'b0;
	data[19] = #50000 1'b1;
	data[19] = #50000 1'b0;
end 
// data[ 18 ]
initial
begin
	data[18] = 1'b0;
	data[18] = #680000 1'b1;
	data[18] = #170000 1'b0;
	data[18] = #50000 1'b1;
	data[18] = #50000 1'b0;
	data[18] = #150000 1'b1;
	data[18] = #50000 1'b0;
	data[18] = #150000 1'b1;
	data[18] = #50000 1'b0;
	data[18] = #50000 1'b1;
	data[18] = #100000 1'b0;
end 
// data[ 17 ]
initial
begin
	data[17] = 1'b0;
	data[17] = #680000 1'b1;
	data[17] = #120000 1'b0;
	data[17] = #50000 1'b1;
	data[17] = #350000 1'b0;
	data[17] = #100000 1'b1;
	data[17] = #100000 1'b0;
	data[17] = #100000 1'b1;
	data[17] = #40000 1'b0;
end 
// data[ 16 ]
initial
begin
	data[16] = 1'b0;
	data[16] = #850000 1'b1;
	data[16] = #50000 1'b0;
	data[16] = #100000 1'b1;
	data[16] = #50000 1'b0;
	data[16] = #300000 1'b1;
	data[16] = #150000 1'b0;
end 
// data[ 15 ]
initial
begin
	data[15] = 1'b0;
	data[15] = #550000 1'b1;
	data[15] = #130000 1'b0;
	data[15] = #170000 1'b1;
	data[15] = #50000 1'b0;
	data[15] = #200000 1'b1;
	data[15] = #150000 1'b0;
	data[15] = #50000 1'b1;
	data[15] = #50000 1'b0;
	data[15] = #50000 1'b1;
	data[15] = #100000 1'b0;
end 
// data[ 14 ]
initial
begin
	data[14] = 1'b0;
	data[14] = #550000 1'b1;
	data[14] = #130000 1'b0;
	data[14] = #170000 1'b1;
	data[14] = #100000 1'b0;
	data[14] = #50000 1'b1;
	data[14] = #50000 1'b0;
	data[14] = #250000 1'b1;
	data[14] = #50000 1'b0;
	data[14] = #50000 1'b1;
	data[14] = #50000 1'b0;
end 
// data[ 13 ]
initial
begin
	data[13] = 1'b0;
	data[13] = #550000 1'b1;
	data[13] = #130000 1'b0;
	data[13] = #170000 1'b1;
	data[13] = #50000 1'b0;
	data[13] = #100000 1'b1;
	data[13] = #50000 1'b0;
	data[13] = #50000 1'b1;
	data[13] = #50000 1'b0;
	data[13] = #100000 1'b1;
	data[13] = #150000 1'b0;
	data[13] = #50000 1'b1;
	data[13] = #90000 1'b0;
end 
// data[ 12 ]
initial
begin
	data[12] = 1'b0;
	data[12] = #550000 1'b1;
	data[12] = #130000 1'b0;
	data[12] = #520000 1'b1;
	data[12] = #50000 1'b0;
	data[12] = #150000 1'b1;
	data[12] = #50000 1'b0;
end 
// data[ 11 ]
initial
begin
	data[11] = 1'b0;
	data[11] = #550000 1'b1;
	data[11] = #130000 1'b0;
	data[11] = #120000 1'b1;
	data[11] = #100000 1'b0;
	data[11] = #100000 1'b1;
	data[11] = #250000 1'b0;
	data[11] = #50000 1'b1;
	data[11] = #50000 1'b0;
	data[11] = #50000 1'b1;
	data[11] = #100000 1'b0;
end 
// data[ 10 ]
initial
begin
	data[10] = 1'b0;
	data[10] = #550000 1'b1;
	data[10] = #130000 1'b0;
	data[10] = #270000 1'b1;
	data[10] = #50000 1'b0;
	data[10] = #50000 1'b1;
	data[10] = #100000 1'b0;
	data[10] = #50000 1'b1;
	data[10] = #150000 1'b0;
	data[10] = #100000 1'b1;
	data[10] = #50000 1'b0;
end 
// data[ 9 ]
initial
begin
	data[9] = 1'b0;
	data[9] = #550000 1'b1;
	data[9] = #130000 1'b0;
	data[9] = #120000 1'b1;
	data[9] = #150000 1'b0;
	data[9] = #100000 1'b1;
	data[9] = #100000 1'b0;
	data[9] = #150000 1'b1;
	data[9] = #50000 1'b0;
	data[9] = #150000 1'b1;
	data[9] = #40000 1'b0;
end 
// data[ 8 ]
initial
begin
	data[8] = 1'b0;
	data[8] = #550000 1'b1;
	data[8] = #130000 1'b0;
	data[8] = #120000 1'b1;
	data[8] = #50000 1'b0;
	data[8] = #50000 1'b1;
	data[8] = #50000 1'b0;
	data[8] = #100000 1'b1;
	data[8] = #50000 1'b0;
	data[8] = #50000 1'b1;
	data[8] = #100000 1'b0;
	data[8] = #100000 1'b1;
	data[8] = #100000 1'b0;
	data[8] = #50000 1'b1;
	data[8] = #40000 1'b0;
end 
// data[ 7 ]
initial
begin
	data[7] = 1'b0;
	data[7] = #550000 1'b1;
	data[7] = #130000 1'b0;
	data[7] = #120000 1'b1;
	data[7] = #50000 1'b0;
	data[7] = #50000 1'b1;
	data[7] = #100000 1'b0;
	data[7] = #50000 1'b1;
	data[7] = #150000 1'b0;
	data[7] = #50000 1'b1;
	data[7] = #100000 1'b0;
	data[7] = #150000 1'b1;
	data[7] = #40000 1'b0;
end 
// data[ 6 ]
initial
begin
	data[6] = 1'b0;
	data[6] = #550000 1'b1;
	data[6] = #130000 1'b0;
	data[6] = #120000 1'b1;
	data[6] = #50000 1'b0;
	data[6] = #50000 1'b1;
	data[6] = #150000 1'b0;
	data[6] = #50000 1'b1;
	data[6] = #150000 1'b0;
	data[6] = #50000 1'b1;
	data[6] = #50000 1'b0;
	data[6] = #100000 1'b1;
	data[6] = #90000 1'b0;
end 
// data[ 5 ]
initial
begin
	data[5] = 1'b0;
	data[5] = #550000 1'b1;
	data[5] = #130000 1'b0;
	data[5] = #120000 1'b1;
	data[5] = #50000 1'b0;
	data[5] = #200000 1'b1;
	data[5] = #50000 1'b0;
	data[5] = #300000 1'b1;
	data[5] = #50000 1'b0;
end 
// data[ 4 ]
initial
begin
	data[4] = 1'b0;
	data[4] = #550000 1'b1;
	data[4] = #130000 1'b0;
	data[4] = #120000 1'b1;
	data[4] = #50000 1'b0;
	data[4] = #50000 1'b1;
	data[4] = #100000 1'b0;
	data[4] = #200000 1'b1;
	data[4] = #100000 1'b0;
	data[4] = #100000 1'b1;
	data[4] = #50000 1'b0;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b0;
	data[3] = #550000 1'b1;
	data[3] = #130000 1'b0;
	data[3] = #270000 1'b1;
	data[3] = #250000 1'b0;
	data[3] = #150000 1'b1;
	data[3] = #100000 1'b0;
	data[3] = #50000 1'b1;
	data[3] = #40000 1'b0;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b0;
	data[2] = #800000 1'b1;
	data[2] = #50000 1'b0;
	data[2] = #250000 1'b1;
	data[2] = #150000 1'b0;
	data[2] = #50000 1'b1;
	data[2] = #100000 1'b0;
	data[2] = #50000 1'b1;
	data[2] = #50000 1'b0;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b0;
	data[1] = #800000 1'b1;
	data[1] = #500000 1'b0;
	data[1] = #50000 1'b1;
	data[1] = #100000 1'b0;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b0;
	data[0] = #550000 1'b1;
	data[0] = #130000 1'b0;
	data[0] = #120000 1'b1;
	data[0] = #50000 1'b0;
	data[0] = #100000 1'b1;
	data[0] = #50000 1'b0;
	data[0] = #50000 1'b1;
	data[0] = #100000 1'b0;
	data[0] = #50000 1'b1;
	data[0] = #100000 1'b0;
	data[0] = #100000 1'b1;
	data[0] = #50000 1'b0;
end 
// sa[ 31 ]
initial
begin
	sa[31] = 1'b0;
end 
// sa[ 30 ]
initial
begin
	sa[30] = 1'b0;
end 
// sa[ 29 ]
initial
begin
	sa[29] = 1'b0;
end 
// sa[ 28 ]
initial
begin
	sa[28] = 1'b0;
end 
// sa[ 27 ]
initial
begin
	sa[27] = 1'b0;
end 
// sa[ 26 ]
initial
begin
	sa[26] = 1'b0;
end 
// sa[ 25 ]
initial
begin
	sa[25] = 1'b0;
end 
// sa[ 24 ]
initial
begin
	sa[24] = 1'b0;
end 
// sa[ 23 ]
initial
begin
	sa[23] = 1'b0;
end 
// sa[ 22 ]
initial
begin
	sa[22] = 1'b0;
end 
// sa[ 21 ]
initial
begin
	sa[21] = 1'b0;
end 
// sa[ 20 ]
initial
begin
	sa[20] = 1'b0;
end 
// sa[ 19 ]
initial
begin
	sa[19] = 1'b0;
end 
// sa[ 18 ]
initial
begin
	sa[18] = 1'b0;
end 
// sa[ 17 ]
initial
begin
	sa[17] = 1'b0;
end 
// sa[ 16 ]
initial
begin
	sa[16] = 1'b0;
end 
// sa[ 15 ]
initial
begin
	sa[15] = 1'b0;
end 
// sa[ 14 ]
initial
begin
	sa[14] = 1'b0;
end 
// sa[ 13 ]
initial
begin
	sa[13] = 1'b0;
end 
// sa[ 12 ]
initial
begin
	sa[12] = 1'b0;
end 
// sa[ 11 ]
initial
begin
	sa[11] = 1'b0;
end 
// sa[ 10 ]
initial
begin
	sa[10] = 1'b0;
end 
// sa[ 9 ]
initial
begin
	sa[9] = 1'b0;
end 
// sa[ 8 ]
initial
begin
	sa[8] = 1'b0;
end 
// sa[ 7 ]
initial
begin
	sa[7] = 1'b0;
end 
// sa[ 6 ]
initial
begin
	sa[6] = 1'b0;
end 
// sa[ 5 ]
initial
begin
	sa[5] = 1'b0;
end 
// sa[ 4 ]
initial
begin
	sa[4] = 1'b0;
	sa[4] = #800000 1'b1;
	sa[4] = #199000 1'b0;
end 
// sa[ 3 ]
initial
begin
	sa[3] = 1'b0;
	sa[3] = #400000 1'b1;
	sa[3] = #400000 1'b0;
	sa[3] = #600000 1'b1;
	sa[3] = #140000 1'b0;
end 
// sa[ 2 ]
initial
begin
	sa[2] = 1'b0;
	sa[2] = #200000 1'b1;
	sa[2] = #200000 1'b0;
	sa[2] = #200000 1'b1;
	sa[2] = #200000 1'b0;
	sa[2] = #400000 1'b1;
	sa[2] = #200000 1'b0;
end 
// sa[ 1 ]
initial
begin
	repeat(3)
	begin
		sa[1] = 1'b0;
		sa[1] = #100000 1'b1;
		# 100000;
	end
	sa[1] = 1'b0;
	sa[1] = #100000 1'b1;
	sa[1] = #100000 1'b0;
	sa[1] = #100000 1'b1;
	sa[1] = #99000 1'b0;
	sa[1] = #101000 1'b1;
	sa[1] = #100000 1'b0;
	sa[1] = #100000 1'b1;
	sa[1] = #100000 1'b0;
	sa[1] = #100000 1'b1;
	sa[1] = #40000 1'b0;
end 
// sa[ 0 ]
initial
begin
	repeat(6)
	begin
		sa[0] = 1'b0;
		sa[0] = #50000 1'b1;
		# 50000;
	end
	sa[0] = 1'b0;
	# 50000;
	repeat(3)
	begin
		sa[0] = 1'b1;
		sa[0] = #50000 1'b0;
		# 50000;
	end
	sa[0] = 1'b1;
	sa[0] = #49000 1'b0;
	sa[0] = #51000 1'b1;
	# 50000;
	repeat(4)
	begin
		sa[0] = 1'b0;
		sa[0] = #50000 1'b1;
		# 50000;
	end
	sa[0] = 1'b0;
end 
endmodule

