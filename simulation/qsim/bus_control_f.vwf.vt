// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/16/2020 11:02:51"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          bus_control
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module bus_control_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] dma;
reg ready;
// wires                                               
wire [7:0] grant;
wire req;

// assign statements (if any)                          
bus_control i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.dma(dma),
	.grant(grant),
	.ready(ready),
	.req(req)
);
initial 
begin 
#1000000 $finish;
end 
// dma[ 7 ]
initial
begin
	dma[7] = 1'b1;
	dma[7] = #30000 1'b0;
end 
// dma[ 6 ]
initial
begin
	dma[6] = 1'b1;
	dma[6] = #30000 1'b0;
	dma[6] = #100000 1'b1;
	dma[6] = #20000 1'b0;
end 
// dma[ 5 ]
initial
begin
	dma[5] = 1'b0;
	dma[5] = #30000 1'b1;
	dma[5] = #30000 1'b0;
end 
// dma[ 4 ]
initial
begin
	dma[4] = 1'b0;
	dma[4] = #90000 1'b1;
	dma[4] = #20000 1'b0;
end 
// dma[ 3 ]
initial
begin
	dma[3] = 1'b0;
	dma[3] = #70000 1'b1;
	dma[3] = #40000 1'b0;
end 
// dma[ 2 ]
initial
begin
	dma[2] = 1'b0;
end 
// dma[ 1 ]
initial
begin
	dma[1] = 1'b0;
	dma[1] = #130000 1'b1;
	dma[1] = #20000 1'b0;
end 
// dma[ 0 ]
initial
begin
	dma[0] = 1'b1;
	dma[0] = #30000 1'b0;
	dma[0] = #950000 1'b1;
end 

// ready
initial
begin
	ready = 1'b0;
	ready = #70000 1'b1;
	ready = #20000 1'b0;
	ready = #100000 1'b1;
	ready = #20000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
endmodule

