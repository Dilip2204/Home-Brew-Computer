// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/10/2020 20:55:10"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          regfile
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module regfile_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clr;
reg [31:0] data_in;
reg [4:0] r_number_a;
reg [4:0] r_number_b;
reg w_en;
reg [4:0] w_number;
// wires                                               
wire [31:0] data_out_a;
wire [31:0] data_out_b;

// assign statements (if any)                          
regfile i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clr(clr),
	.data_in(data_in),
	.data_out_a(data_out_a),
	.data_out_b(data_out_b),
	.r_number_a(r_number_a),
	.r_number_b(r_number_b),
	.w_en(w_en),
	.w_number(w_number)
);
initial 
begin 
#2000000 $finish;
end 

// clk
initial
begin
	repeat(49)
	begin
		clk = 1'b0;
		clk = #10000 1'b1;
		# 10000;
	end
	clk = 1'b0;
	clk = #10000 1'b1;
	clk = #9000 1'b0;
end 

// clr
initial
begin
	clr = 1'b0;
	clr = #10000 1'b1;
	clr = #20000 1'b0;
	clr = #880000 1'b1;
	clr = #20000 1'b0;
end 
// data_in[ 31 ]
initial
begin
	data_in[31] = 1'b0;
	data_in[31] = #670000 1'b1;
	data_in[31] = #40000 1'b0;
	data_in[31] = #20000 1'b1;
	data_in[31] = #20000 1'b0;
	data_in[31] = #60000 1'b1;
	data_in[31] = #40000 1'b0;
	data_in[31] = #20000 1'b1;
	data_in[31] = #60000 1'b0;
end 
// data_in[ 30 ]
initial
begin
	data_in[30] = 1'b0;
	data_in[30] = #670000 1'b1;
	data_in[30] = #60000 1'b0;
	data_in[30] = #20000 1'b1;
	data_in[30] = #40000 1'b0;
	data_in[30] = #40000 1'b1;
	data_in[30] = #20000 1'b0;
	data_in[30] = #20000 1'b1;
	data_in[30] = #20000 1'b0;
end 
// data_in[ 29 ]
initial
begin
	data_in[29] = 1'b0;
	data_in[29] = #670000 1'b1;
	data_in[29] = #60000 1'b0;
	data_in[29] = #20000 1'b1;
	data_in[29] = #40000 1'b0;
	data_in[29] = #20000 1'b1;
	data_in[29] = #80000 1'b0;
	data_in[29] = #20000 1'b1;
	data_in[29] = #20000 1'b0;
end 
// data_in[ 28 ]
initial
begin
	data_in[28] = 1'b0;
	data_in[28] = #670000 1'b1;
	data_in[28] = #40000 1'b0;
	data_in[28] = #20000 1'b1;
	data_in[28] = #40000 1'b0;
	data_in[28] = #20000 1'b1;
	data_in[28] = #20000 1'b0;
	data_in[28] = #20000 1'b1;
	data_in[28] = #20000 1'b0;
	data_in[28] = #20000 1'b1;
	data_in[28] = #60000 1'b0;
end 
// data_in[ 27 ]
initial
begin
	data_in[27] = 1'b0;
	data_in[27] = #710000 1'b1;
	data_in[27] = #20000 1'b0;
	data_in[27] = #60000 1'b1;
	data_in[27] = #20000 1'b0;
	data_in[27] = #100000 1'b1;
	data_in[27] = #20000 1'b0;
end 
// data_in[ 26 ]
initial
begin
	data_in[26] = 1'b0;
	data_in[26] = #670000 1'b1;
	data_in[26] = #20000 1'b0;
	data_in[26] = #20000 1'b1;
	data_in[26] = #20000 1'b0;
	data_in[26] = #20000 1'b1;
	data_in[26] = #20000 1'b0;
	data_in[26] = #60000 1'b1;
	data_in[26] = #20000 1'b0;
	data_in[26] = #40000 1'b1;
	data_in[26] = #20000 1'b0;
end 
// data_in[ 25 ]
initial
begin
	data_in[25] = 1'b0;
	data_in[25] = #690000 1'b1;
	data_in[25] = #100000 1'b0;
	data_in[25] = #20000 1'b1;
	data_in[25] = #20000 1'b0;
	data_in[25] = #40000 1'b1;
	data_in[25] = #40000 1'b0;
end 
// data_in[ 24 ]
initial
begin
	data_in[24] = 1'b0;
	data_in[24] = #670000 1'b1;
	data_in[24] = #40000 1'b0;
	data_in[24] = #60000 1'b1;
	data_in[24] = #20000 1'b0;
	data_in[24] = #20000 1'b1;
	data_in[24] = #20000 1'b0;
	data_in[24] = #80000 1'b1;
	data_in[24] = #20000 1'b0;
end 
// data_in[ 23 ]
initial
begin
	data_in[23] = 1'b0;
	data_in[23] = #670000 1'b1;
	data_in[23] = #20000 1'b0;
	data_in[23] = #60000 1'b1;
	data_in[23] = #40000 1'b0;
	data_in[23] = #20000 1'b1;
	data_in[23] = #40000 1'b0;
	data_in[23] = #60000 1'b1;
	data_in[23] = #20000 1'b0;
end 
// data_in[ 22 ]
initial
begin
	data_in[22] = 1'b0;
	data_in[22] = #770000 1'b1;
	data_in[22] = #100000 1'b0;
	data_in[22] = #40000 1'b1;
	data_in[22] = #20000 1'b0;
end 
// data_in[ 21 ]
initial
begin
	data_in[21] = 1'b0;
	data_in[21] = #670000 1'b1;
	data_in[21] = #20000 1'b0;
	data_in[21] = #20000 1'b1;
	data_in[21] = #80000 1'b0;
	data_in[21] = #20000 1'b1;
	data_in[21] = #60000 1'b0;
	data_in[21] = #20000 1'b1;
	data_in[21] = #20000 1'b0;
end 
// data_in[ 20 ]
initial
begin
	data_in[20] = 1'b0;
	data_in[20] = #770000 1'b1;
	data_in[20] = #40000 1'b0;
	data_in[20] = #20000 1'b1;
	data_in[20] = #40000 1'b0;
	data_in[20] = #40000 1'b1;
	data_in[20] = #20000 1'b0;
end 
// data_in[ 19 ]
initial
begin
	data_in[19] = 1'b0;
	data_in[19] = #670000 1'b1;
	data_in[19] = #40000 1'b0;
	data_in[19] = #20000 1'b1;
	data_in[19] = #40000 1'b0;
	data_in[19] = #60000 1'b1;
	data_in[19] = #40000 1'b0;
	data_in[19] = #40000 1'b1;
	data_in[19] = #20000 1'b0;
end 
// data_in[ 18 ]
initial
begin
	data_in[18] = 1'b0;
	data_in[18] = #670000 1'b1;
	data_in[18] = #40000 1'b0;
	data_in[18] = #60000 1'b1;
	data_in[18] = #40000 1'b0;
	data_in[18] = #40000 1'b1;
	data_in[18] = #40000 1'b0;
	data_in[18] = #20000 1'b1;
	data_in[18] = #20000 1'b0;
end 
// data_in[ 17 ]
initial
begin
	data_in[17] = 1'b0;
	data_in[17] = #710000 1'b1;
	data_in[17] = #20000 1'b0;
	data_in[17] = #20000 1'b1;
	data_in[17] = #100000 1'b0;
	data_in[17] = #20000 1'b1;
	data_in[17] = #40000 1'b0;
end 
// data_in[ 16 ]
initial
begin
	data_in[16] = 1'b0;
	data_in[16] = #670000 1'b1;
	data_in[16] = #40000 1'b0;
	data_in[16] = #80000 1'b1;
	data_in[16] = #40000 1'b0;
	data_in[16] = #40000 1'b1;
	data_in[16] = #20000 1'b0;
	data_in[16] = #20000 1'b1;
	data_in[16] = #20000 1'b0;
end 
// data_in[ 15 ]
initial
begin
	data_in[15] = 1'b0;
	data_in[15] = #790000 1'b1;
	data_in[15] = #40000 1'b0;
	data_in[15] = #40000 1'b1;
	data_in[15] = #20000 1'b0;
end 
// data_in[ 14 ]
initial
begin
	data_in[14] = 1'b0;
	data_in[14] = #670000 1'b1;
	data_in[14] = #20000 1'b0;
	data_in[14] = #20000 1'b1;
	data_in[14] = #80000 1'b0;
	data_in[14] = #40000 1'b1;
	data_in[14] = #40000 1'b0;
end 
// data_in[ 13 ]
initial
begin
	data_in[13] = 1'b0;
	data_in[13] = #730000 1'b1;
	data_in[13] = #20000 1'b0;
	data_in[13] = #20000 1'b1;
	data_in[13] = #20000 1'b0;
	data_in[13] = #80000 1'b1;
	data_in[13] = #20000 1'b0;
	data_in[13] = #20000 1'b1;
	data_in[13] = #20000 1'b0;
end 
// data_in[ 12 ]
initial
begin
	data_in[12] = 1'b0;
	data_in[12] = #710000 1'b1;
	data_in[12] = #80000 1'b0;
	data_in[12] = #20000 1'b1;
	data_in[12] = #20000 1'b0;
end 
// data_in[ 11 ]
initial
begin
	data_in[11] = 1'b0;
	data_in[11] = #690000 1'b1;
	data_in[11] = #40000 1'b0;
	data_in[11] = #40000 1'b1;
	data_in[11] = #20000 1'b0;
	data_in[11] = #40000 1'b1;
	data_in[11] = #20000 1'b0;
	data_in[11] = #20000 1'b1;
	data_in[11] = #60000 1'b0;
end 
// data_in[ 10 ]
initial
begin
	data_in[10] = 1'b0;
	data_in[10] = #670000 1'b1;
	data_in[10] = #40000 1'b0;
	data_in[10] = #20000 1'b1;
	data_in[10] = #60000 1'b0;
	data_in[10] = #80000 1'b1;
	data_in[10] = #40000 1'b0;
end 
// data_in[ 9 ]
initial
begin
	data_in[9] = 1'b0;
	data_in[9] = #670000 1'b1;
	data_in[9] = #100000 1'b0;
	data_in[9] = #60000 1'b1;
	data_in[9] = #20000 1'b0;
	data_in[9] = #60000 1'b1;
	data_in[9] = #20000 1'b0;
end 
// data_in[ 8 ]
initial
begin
	data_in[8] = 1'b0;
	data_in[8] = #670000 1'b1;
	data_in[8] = #20000 1'b0;
	data_in[8] = #80000 1'b1;
	data_in[8] = #100000 1'b0;
	data_in[8] = #40000 1'b1;
	data_in[8] = #20000 1'b0;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b0;
	data_in[7] = #670000 1'b1;
	data_in[7] = #40000 1'b0;
	data_in[7] = #40000 1'b1;
	data_in[7] = #20000 1'b0;
	data_in[7] = #20000 1'b1;
	data_in[7] = #40000 1'b0;
	data_in[7] = #20000 1'b1;
	data_in[7] = #20000 1'b0;
	data_in[7] = #40000 1'b1;
	data_in[7] = #20000 1'b0;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b0;
	data_in[6] = #670000 1'b1;
	data_in[6] = #20000 1'b0;
	data_in[6] = #20000 1'b1;
	data_in[6] = #20000 1'b0;
	data_in[6] = #60000 1'b1;
	data_in[6] = #80000 1'b0;
	data_in[6] = #20000 1'b1;
	data_in[6] = #40000 1'b0;
end 
// data_in[ 5 ]
initial
begin
	data_in[5] = 1'b0;
	data_in[5] = #730000 1'b1;
	data_in[5] = #20000 1'b0;
	data_in[5] = #40000 1'b1;
	data_in[5] = #40000 1'b0;
	data_in[5] = #40000 1'b1;
	data_in[5] = #40000 1'b0;
end 
// data_in[ 4 ]
initial
begin
	data_in[4] = 1'b0;
	data_in[4] = #730000 1'b1;
	data_in[4] = #20000 1'b0;
	data_in[4] = #40000 1'b1;
	data_in[4] = #40000 1'b0;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b0;
	data_in[3] = #730000 1'b1;
	data_in[3] = #120000 1'b0;
	data_in[3] = #20000 1'b1;
	data_in[3] = #20000 1'b0;
end 
// data_in[ 2 ]
initial
begin
	data_in[2] = 1'b0;
	data_in[2] = #710000 1'b1;
	data_in[2] = #40000 1'b0;
	data_in[2] = #20000 1'b1;
	data_in[2] = #60000 1'b0;
	data_in[2] = #40000 1'b1;
	data_in[2] = #60000 1'b0;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b0;
	data_in[1] = #670000 1'b1;
	data_in[1] = #20000 1'b0;
	data_in[1] = #40000 1'b1;
	data_in[1] = #20000 1'b0;
	data_in[1] = #20000 1'b1;
	data_in[1] = #60000 1'b0;
	data_in[1] = #20000 1'b1;
	data_in[1] = #20000 1'b0;
	data_in[1] = #20000 1'b1;
	data_in[1] = #20000 1'b0;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b0;
	data_in[0] = #690000 1'b1;
	data_in[0] = #20000 1'b0;
	data_in[0] = #20000 1'b1;
	data_in[0] = #20000 1'b0;
	data_in[0] = #20000 1'b1;
	data_in[0] = #60000 1'b0;
end 
// r_number_a[ 4 ]
initial
begin
	r_number_a[4] = 1'b0;
	r_number_a[4] = #350000 1'b1;
	r_number_a[4] = #320000 1'b0;
	r_number_a[4] = #20000 1'b1;
	r_number_a[4] = #20000 1'b0;
	r_number_a[4] = #80000 1'b1;
	r_number_a[4] = #20000 1'b0;
	r_number_a[4] = #390000 1'b1;
	r_number_a[4] = #320000 1'b0;
	r_number_a[4] = #320000 1'b1;
	r_number_a[4] = #80000 1'b0;
end 
// r_number_a[ 3 ]
initial
begin
	r_number_a[3] = 1'b0;
	r_number_a[3] = #190000 1'b1;
	r_number_a[3] = #160000 1'b0;
	r_number_a[3] = #160000 1'b1;
	r_number_a[3] = #180000 1'b0;
	r_number_a[3] = #40000 1'b1;
	r_number_a[3] = #60000 1'b0;
	r_number_a[3] = #20000 1'b1;
	r_number_a[3] = #90000 1'b0;
	# 140000;
	repeat(2)
	begin
		r_number_a[3] = 1'b1;
		r_number_a[3] = #160000 1'b0;
		# 160000;
	end
	r_number_a[3] = 1'b1;
	r_number_a[3] = #160000 1'b0;
end 
// r_number_a[ 2 ]
initial
begin
	r_number_a[2] = 1'b0;
	r_number_a[2] = #110000 1'b1;
	# 80000;
	repeat(2)
	begin
		r_number_a[2] = 1'b0;
		r_number_a[2] = #80000 1'b1;
		# 80000;
	end
	r_number_a[2] = 1'b0;
	r_number_a[2] = #80000 1'b1;
	r_number_a[2] = #120000 1'b0;
	r_number_a[2] = #40000 1'b1;
	r_number_a[2] = #20000 1'b0;
	r_number_a[2] = #20000 1'b1;
	r_number_a[2] = #20000 1'b0;
	r_number_a[2] = #150000 1'b1;
	r_number_a[2] = #80000 1'b0;
	# 80000;
	repeat(4)
	begin
		r_number_a[2] = 1'b1;
		r_number_a[2] = #80000 1'b0;
		# 80000;
	end
	r_number_a[2] = 1'b1;
	r_number_a[2] = #80000 1'b0;
end 
// r_number_a[ 1 ]
initial
begin
	r_number_a[1] = 1'b0;
	r_number_a[1] = #70000 1'b1;
	# 40000;
	repeat(5)
	begin
		r_number_a[1] = 1'b0;
		r_number_a[1] = #40000 1'b1;
		# 40000;
	end
	r_number_a[1] = 1'b0;
	r_number_a[1] = #40000 1'b1;
	r_number_a[1] = #40000 1'b0;
	r_number_a[1] = #40000 1'b1;
	r_number_a[1] = #40000 1'b0;
	r_number_a[1] = #100000 1'b1;
	r_number_a[1] = #60000 1'b0;
	r_number_a[1] = #90000 1'b1;
	r_number_a[1] = #40000 1'b0;
	# 40000;
	repeat(11)
	begin
		r_number_a[1] = 1'b1;
		r_number_a[1] = #40000 1'b0;
		# 40000;
	end
	r_number_a[1] = 1'b1;
	r_number_a[1] = #40000 1'b0;
end 
// r_number_a[ 0 ]
initial
begin
	r_number_a[0] = 1'b0;
	r_number_a[0] = #50000 1'b1;
	# 20000;
	repeat(12)
	begin
		r_number_a[0] = 1'b0;
		r_number_a[0] = #20000 1'b1;
		# 20000;
	end
	repeat(3)
	begin
		r_number_a[0] = 1'b0;
		r_number_a[0] = #20000 1'b1;
		# 20000;
	end
	r_number_a[0] = 1'b0;
	r_number_a[0] = #20000 1'b1;
	r_number_a[0] = #20000 1'b0;
	r_number_a[0] = #20000 1'b1;
	r_number_a[0] = #60000 1'b0;
	r_number_a[0] = #20000 1'b1;
	r_number_a[0] = #110000 1'b0;
	# 20000;
	repeat(24)
	begin
		r_number_a[0] = 1'b1;
		r_number_a[0] = #20000 1'b0;
		# 20000;
	end
	r_number_a[0] = 1'b1;
	r_number_a[0] = #20000 1'b0;
end 
// r_number_b[ 4 ]
initial
begin
	r_number_b[4] = 1'b0;
	r_number_b[4] = #350000 1'b1;
	r_number_b[4] = #340000 1'b0;
	r_number_b[4] = #120000 1'b1;
	r_number_b[4] = #20000 1'b0;
end 
// r_number_b[ 3 ]
initial
begin
	r_number_b[3] = 1'b0;
	r_number_b[3] = #190000 1'b1;
	r_number_b[3] = #160000 1'b0;
	r_number_b[3] = #160000 1'b1;
	r_number_b[3] = #160000 1'b0;
	r_number_b[3] = #20000 1'b1;
	r_number_b[3] = #40000 1'b0;
	r_number_b[3] = #20000 1'b1;
	r_number_b[3] = #60000 1'b0;
end 
// r_number_b[ 2 ]
initial
begin
	r_number_b[2] = 1'b0;
	r_number_b[2] = #110000 1'b1;
	# 80000;
	repeat(2)
	begin
		r_number_b[2] = 1'b0;
		r_number_b[2] = #80000 1'b1;
		# 80000;
	end
	r_number_b[2] = 1'b0;
	r_number_b[2] = #80000 1'b1;
	r_number_b[2] = #120000 1'b0;
	r_number_b[2] = #60000 1'b1;
	r_number_b[2] = #20000 1'b0;
	r_number_b[2] = #20000 1'b1;
	r_number_b[2] = #20000 1'b0;
end 
// r_number_b[ 1 ]
initial
begin
	r_number_b[1] = 1'b0;
	r_number_b[1] = #70000 1'b1;
	# 40000;
	repeat(7)
	begin
		r_number_b[1] = 1'b0;
		r_number_b[1] = #40000 1'b1;
		# 40000;
	end
	r_number_b[1] = 1'b0;
	r_number_b[1] = #80000 1'b1;
	r_number_b[1] = #20000 1'b0;
	r_number_b[1] = #20000 1'b1;
	r_number_b[1] = #40000 1'b0;
end 
// r_number_b[ 0 ]
initial
begin
	r_number_b[0] = 1'b0;
	r_number_b[0] = #50000 1'b1;
	# 20000;
	repeat(14)
	begin
		r_number_b[0] = 1'b0;
		r_number_b[0] = #20000 1'b1;
		# 20000;
	end
	r_number_b[0] = 1'b0;
	r_number_b[0] = #20000 1'b1;
	r_number_b[0] = #40000 1'b0;
	r_number_b[0] = #20000 1'b1;
	r_number_b[0] = #20000 1'b0;
	r_number_b[0] = #20000 1'b1;
	r_number_b[0] = #60000 1'b0;
end 

// w_en
initial
begin
	w_en = 1'b0;
	w_en = #670000 1'b1;
	w_en = #240000 1'b0;
end 
// w_number[ 4 ]
initial
begin
	w_number[4] = 1'b0;
	w_number[4] = #690000 1'b1;
	w_number[4] = #20000 1'b0;
	w_number[4] = #80000 1'b1;
	w_number[4] = #20000 1'b0;
end 
// w_number[ 3 ]
initial
begin
	w_number[3] = 1'b0;
	w_number[3] = #670000 1'b1;
	w_number[3] = #20000 1'b0;
	w_number[3] = #40000 1'b1;
	w_number[3] = #60000 1'b0;
	w_number[3] = #20000 1'b1;
	w_number[3] = #100000 1'b0;
end 
// w_number[ 2 ]
initial
begin
	w_number[2] = 1'b0;
	w_number[2] = #670000 1'b1;
	w_number[2] = #40000 1'b0;
	w_number[2] = #40000 1'b1;
	w_number[2] = #20000 1'b0;
	w_number[2] = #20000 1'b1;
	w_number[2] = #20000 1'b0;
end 
// w_number[ 1 ]
initial
begin
	w_number[1] = 1'b0;
	w_number[1] = #770000 1'b1;
	w_number[1] = #60000 1'b0;
end 
// w_number[ 0 ]
initial
begin
	w_number[0] = 1'b0;
	w_number[0] = #690000 1'b1;
	w_number[0] = #20000 1'b0;
	w_number[0] = #20000 1'b1;
	w_number[0] = #60000 1'b0;
	w_number[0] = #20000 1'b1;
	w_number[0] = #100000 1'b0;
end 
endmodule

