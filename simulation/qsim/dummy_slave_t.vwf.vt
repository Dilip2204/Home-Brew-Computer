// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/15/2020 17:41:19"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          dummy_slave
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module dummy_slave_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] address;
reg clk;
reg [31:0] treg_data;
reg r_w;
reg request;
// wires                                               
wire [31:0] data;
wire ready;

// assign statements (if any)                          
assign data = treg_data;
dummy_slave i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.clk(clk),
	.data(data),
	.r_w(r_w),
	.ready(ready),
	.request(request)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// data[ 31 ]
initial
begin
	treg_data[31] = 1'b1;
	treg_data[31] = #80000 1'bZ;
end 
// data[ 30 ]
initial
begin
	treg_data[30] = 1'b0;
	treg_data[30] = #80000 1'bZ;
end 
// data[ 29 ]
initial
begin
	treg_data[29] = 1'b0;
	treg_data[29] = #80000 1'bZ;
end 
// data[ 28 ]
initial
begin
	treg_data[28] = 1'b0;
	treg_data[28] = #80000 1'bZ;
end 
// data[ 27 ]
initial
begin
	treg_data[27] = 1'b0;
	treg_data[27] = #80000 1'bZ;
end 
// data[ 26 ]
initial
begin
	treg_data[26] = 1'b0;
	treg_data[26] = #80000 1'bZ;
end 
// data[ 25 ]
initial
begin
	treg_data[25] = 1'b0;
	treg_data[25] = #80000 1'bZ;
end 
// data[ 24 ]
initial
begin
	treg_data[24] = 1'b1;
	treg_data[24] = #80000 1'bZ;
end 
// data[ 23 ]
initial
begin
	treg_data[23] = 1'b1;
	treg_data[23] = #80000 1'bZ;
end 
// data[ 22 ]
initial
begin
	treg_data[22] = 1'b0;
	treg_data[22] = #80000 1'bZ;
end 
// data[ 21 ]
initial
begin
	treg_data[21] = 1'b1;
	treg_data[21] = #80000 1'bZ;
end 
// data[ 20 ]
initial
begin
	treg_data[20] = 1'b0;
	treg_data[20] = #80000 1'bZ;
end 
// data[ 19 ]
initial
begin
	treg_data[19] = 1'b1;
	treg_data[19] = #80000 1'bZ;
end 
// data[ 18 ]
initial
begin
	treg_data[18] = 1'b0;
	treg_data[18] = #80000 1'bZ;
end 
// data[ 17 ]
initial
begin
	treg_data[17] = 1'b0;
	treg_data[17] = #80000 1'bZ;
end 
// data[ 16 ]
initial
begin
	treg_data[16] = 1'b1;
	treg_data[16] = #80000 1'bZ;
end 
// data[ 15 ]
initial
begin
	treg_data[15] = 1'b1;
	treg_data[15] = #80000 1'bZ;
end 
// data[ 14 ]
initial
begin
	treg_data[14] = 1'b1;
	treg_data[14] = #80000 1'bZ;
end 
// data[ 13 ]
initial
begin
	treg_data[13] = 1'b1;
	treg_data[13] = #80000 1'bZ;
end 
// data[ 12 ]
initial
begin
	treg_data[12] = 1'b1;
	treg_data[12] = #80000 1'bZ;
end 
// data[ 11 ]
initial
begin
	treg_data[11] = 1'b0;
	treg_data[11] = #80000 1'bZ;
end 
// data[ 10 ]
initial
begin
	treg_data[10] = 1'b0;
	treg_data[10] = #80000 1'bZ;
end 
// data[ 9 ]
initial
begin
	treg_data[9] = 1'b1;
	treg_data[9] = #80000 1'bZ;
end 
// data[ 8 ]
initial
begin
	treg_data[8] = 1'b0;
	treg_data[8] = #80000 1'bZ;
end 
// data[ 7 ]
initial
begin
	treg_data[7] = 1'b1;
	treg_data[7] = #80000 1'bZ;
end 
// data[ 6 ]
initial
begin
	treg_data[6] = 1'b1;
	treg_data[6] = #80000 1'bZ;
end 
// data[ 5 ]
initial
begin
	treg_data[5] = 1'b0;
	treg_data[5] = #80000 1'bZ;
end 
// data[ 4 ]
initial
begin
	treg_data[4] = 1'b0;
	treg_data[4] = #80000 1'bZ;
end 
// data[ 3 ]
initial
begin
	treg_data[3] = 1'b1;
	treg_data[3] = #80000 1'bZ;
end 
// data[ 2 ]
initial
begin
	treg_data[2] = 1'b1;
	treg_data[2] = #80000 1'bZ;
end 
// data[ 1 ]
initial
begin
	treg_data[1] = 1'b1;
	treg_data[1] = #80000 1'bZ;
end 
// data[ 0 ]
initial
begin
	treg_data[0] = 1'b1;
	treg_data[0] = #80000 1'bZ;
end 

// r_w
initial
begin
	r_w = 1'b1;
	r_w = #20000 1'b0;
end 

// request
initial
begin
	request = 1'b1;
	request = #210000 1'b0;
	request = #40000 1'b1;
	request = #20000 1'b0;
	request = #700000 1'b1;
end 
// address[ 31 ]
initial
begin
	address[31] = 1'b0;
end 
// address[ 30 ]
initial
begin
	address[30] = 1'b0;
end 
// address[ 29 ]
initial
begin
	address[29] = 1'b0;
end 
// address[ 28 ]
initial
begin
	address[28] = 1'b0;
end 
// address[ 27 ]
initial
begin
	address[27] = 1'b0;
end 
// address[ 26 ]
initial
begin
	address[26] = 1'b0;
end 
// address[ 25 ]
initial
begin
	address[25] = 1'b0;
end 
// address[ 24 ]
initial
begin
	address[24] = 1'b0;
end 
// address[ 23 ]
initial
begin
	address[23] = 1'b0;
end 
// address[ 22 ]
initial
begin
	address[22] = 1'b0;
end 
// address[ 21 ]
initial
begin
	address[21] = 1'b0;
end 
// address[ 20 ]
initial
begin
	address[20] = 1'b0;
end 
// address[ 19 ]
initial
begin
	address[19] = 1'b0;
end 
// address[ 18 ]
initial
begin
	address[18] = 1'b0;
end 
// address[ 17 ]
initial
begin
	address[17] = 1'b0;
end 
// address[ 16 ]
initial
begin
	address[16] = 1'b0;
end 
// address[ 15 ]
initial
begin
	address[15] = 1'b0;
end 
// address[ 14 ]
initial
begin
	address[14] = 1'b0;
end 
// address[ 13 ]
initial
begin
	address[13] = 1'b0;
end 
// address[ 12 ]
initial
begin
	address[12] = 1'b0;
end 
// address[ 11 ]
initial
begin
	address[11] = 1'b0;
end 
// address[ 10 ]
initial
begin
	address[10] = 1'b0;
end 
// address[ 9 ]
initial
begin
	address[9] = 1'b0;
end 
// address[ 8 ]
initial
begin
	address[8] = 1'b0;
end 
// address[ 7 ]
initial
begin
	address[7] = 1'b0;
end 
// address[ 6 ]
initial
begin
	address[6] = 1'b0;
end 
// address[ 5 ]
initial
begin
	address[5] = 1'b0;
	address[5] = #190000 1'b1;
	address[5] = #20000 1'b0;
end 
// address[ 4 ]
initial
begin
	address[4] = 1'b0;
end 
// address[ 3 ]
initial
begin
	address[3] = 1'b1;
	address[3] = #160000 1'b0;
	address[3] = #90000 1'b1;
	address[3] = #20000 1'b0;
	address[3] = #720000 1'b1;
end 
// address[ 2 ]
initial
begin
	address[2] = 1'b1;
	address[2] = #160000 1'b0;
	address[2] = #90000 1'b1;
	address[2] = #20000 1'b0;
	address[2] = #720000 1'b1;
end 
// address[ 1 ]
initial
begin
	address[1] = 1'b1;
	address[1] = #160000 1'b0;
	address[1] = #90000 1'b1;
	address[1] = #20000 1'b0;
	address[1] = #720000 1'b1;
end 
// address[ 0 ]
initial
begin
	address[0] = 1'b1;
	address[0] = #160000 1'b0;
	address[0] = #30000 1'b1;
	address[0] = #20000 1'b0;
	address[0] = #40000 1'b1;
	address[0] = #20000 1'b0;
	address[0] = #720000 1'b1;
end 
endmodule

