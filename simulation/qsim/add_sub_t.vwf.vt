// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/02/2020 19:29:27"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          add_sub
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module add_sub_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] a;
reg add_sub;
reg [31:0] b;
// wires                                               
wire overflow;
wire [31:0] result;

// assign statements (if any)                          
add_sub i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.add_sub(add_sub),
	.b(b),
	.overflow(overflow),
	.result(result)
);
initial 
begin 
#1000000 $finish;
end 

// add_sub
initial
begin
	add_sub = 1'b0;
	add_sub = #350000 1'b1;
	add_sub = #580000 1'b0;
end 
// a[ 31 ]
initial
begin
	a[31] = 1'b0;
	a[31] = #80000 1'b1;
	a[31] = #60000 1'b0;
	a[31] = #140000 1'b1;
	a[31] = #70000 1'b0;
	a[31] = #320000 1'b1;
	a[31] = #260000 1'b0;
end 
// a[ 30 ]
initial
begin
	a[30] = 1'b0;
	a[30] = #80000 1'b1;
	a[30] = #60000 1'b0;
	a[30] = #70000 1'b1;
	a[30] = #140000 1'b0;
	a[30] = #320000 1'b1;
	a[30] = #260000 1'b0;
end 
// a[ 29 ]
initial
begin
	a[29] = 1'b0;
	a[29] = #80000 1'b1;
	a[29] = #60000 1'b0;
	a[29] = #70000 1'b1;
	a[29] = #140000 1'b0;
	a[29] = #320000 1'b1;
	a[29] = #260000 1'b0;
end 
// a[ 28 ]
initial
begin
	a[28] = 1'b0;
	a[28] = #80000 1'b1;
	a[28] = #60000 1'b0;
	a[28] = #70000 1'b1;
	a[28] = #140000 1'b0;
	a[28] = #320000 1'b1;
	a[28] = #260000 1'b0;
end 
// a[ 27 ]
initial
begin
	a[27] = 1'b0;
	a[27] = #80000 1'b1;
	a[27] = #60000 1'b0;
	a[27] = #70000 1'b1;
	a[27] = #140000 1'b0;
	a[27] = #320000 1'b1;
	a[27] = #260000 1'b0;
end 
// a[ 26 ]
initial
begin
	a[26] = 1'b0;
	a[26] = #80000 1'b1;
	a[26] = #60000 1'b0;
	a[26] = #70000 1'b1;
	a[26] = #140000 1'b0;
	a[26] = #320000 1'b1;
	a[26] = #260000 1'b0;
end 
// a[ 25 ]
initial
begin
	a[25] = 1'b0;
	a[25] = #80000 1'b1;
	a[25] = #60000 1'b0;
	a[25] = #70000 1'b1;
	a[25] = #140000 1'b0;
	a[25] = #320000 1'b1;
	a[25] = #260000 1'b0;
end 
// a[ 24 ]
initial
begin
	a[24] = 1'b0;
	a[24] = #80000 1'b1;
	a[24] = #60000 1'b0;
	a[24] = #70000 1'b1;
	a[24] = #140000 1'b0;
	a[24] = #320000 1'b1;
	a[24] = #260000 1'b0;
end 
// a[ 23 ]
initial
begin
	a[23] = 1'b0;
	a[23] = #80000 1'b1;
	a[23] = #60000 1'b0;
	a[23] = #70000 1'b1;
	a[23] = #140000 1'b0;
	a[23] = #320000 1'b1;
	a[23] = #260000 1'b0;
end 
// a[ 22 ]
initial
begin
	a[22] = 1'b0;
	a[22] = #80000 1'b1;
	a[22] = #60000 1'b0;
	a[22] = #70000 1'b1;
	a[22] = #140000 1'b0;
	a[22] = #320000 1'b1;
	a[22] = #260000 1'b0;
end 
// a[ 21 ]
initial
begin
	a[21] = 1'b0;
	a[21] = #80000 1'b1;
	a[21] = #60000 1'b0;
	a[21] = #70000 1'b1;
	a[21] = #140000 1'b0;
	a[21] = #320000 1'b1;
	a[21] = #260000 1'b0;
end 
// a[ 20 ]
initial
begin
	a[20] = 1'b0;
	a[20] = #80000 1'b1;
	a[20] = #60000 1'b0;
	a[20] = #70000 1'b1;
	a[20] = #140000 1'b0;
	a[20] = #320000 1'b1;
	a[20] = #260000 1'b0;
end 
// a[ 19 ]
initial
begin
	a[19] = 1'b0;
	a[19] = #80000 1'b1;
	a[19] = #60000 1'b0;
	a[19] = #70000 1'b1;
	a[19] = #140000 1'b0;
	a[19] = #320000 1'b1;
	a[19] = #260000 1'b0;
end 
// a[ 18 ]
initial
begin
	a[18] = 1'b0;
	a[18] = #80000 1'b1;
	a[18] = #270000 1'b0;
	a[18] = #320000 1'b1;
	a[18] = #260000 1'b0;
end 
// a[ 17 ]
initial
begin
	a[17] = 1'b0;
	a[17] = #80000 1'b1;
	a[17] = #270000 1'b0;
	a[17] = #320000 1'b1;
	a[17] = #260000 1'b0;
end 
// a[ 16 ]
initial
begin
	a[16] = 1'b0;
	a[16] = #80000 1'b1;
	a[16] = #270000 1'b0;
	a[16] = #320000 1'b1;
	a[16] = #260000 1'b0;
end 
// a[ 15 ]
initial
begin
	a[15] = 1'b0;
	a[15] = #80000 1'b1;
	a[15] = #60000 1'b0;
	a[15] = #70000 1'b1;
	a[15] = #140000 1'b0;
	a[15] = #320000 1'b1;
	a[15] = #260000 1'b0;
end 
// a[ 14 ]
initial
begin
	a[14] = 1'b0;
	a[14] = #80000 1'b1;
	a[14] = #270000 1'b0;
	a[14] = #320000 1'b1;
	a[14] = #260000 1'b0;
end 
// a[ 13 ]
initial
begin
	a[13] = 1'b0;
	a[13] = #80000 1'b1;
	a[13] = #270000 1'b0;
	a[13] = #320000 1'b1;
	a[13] = #260000 1'b0;
end 
// a[ 12 ]
initial
begin
	a[12] = 1'b0;
	a[12] = #80000 1'b1;
	a[12] = #60000 1'b0;
	a[12] = #70000 1'b1;
	a[12] = #140000 1'b0;
	a[12] = #320000 1'b1;
	a[12] = #260000 1'b0;
end 
// a[ 11 ]
initial
begin
	a[11] = 1'b0;
	a[11] = #80000 1'b1;
	a[11] = #60000 1'b0;
	a[11] = #70000 1'b1;
	a[11] = #140000 1'b0;
	a[11] = #320000 1'b1;
	a[11] = #260000 1'b0;
end 
// a[ 10 ]
initial
begin
	a[10] = 1'b0;
	a[10] = #80000 1'b1;
	a[10] = #270000 1'b0;
	a[10] = #320000 1'b1;
	a[10] = #260000 1'b0;
end 
// a[ 9 ]
initial
begin
	a[9] = 1'b1;
	a[9] = #140000 1'b0;
	a[9] = #70000 1'b1;
	a[9] = #140000 1'b0;
	a[9] = #320000 1'b1;
	a[9] = #260000 1'b0;
end 
// a[ 8 ]
initial
begin
	a[8] = 1'b0;
	a[8] = #80000 1'b1;
	a[8] = #590000 1'b0;
end 
// a[ 7 ]
initial
begin
	a[7] = 1'b0;
	a[7] = #210000 1'b1;
	a[7] = #140000 1'b0;
	a[7] = #320000 1'b1;
	a[7] = #260000 1'b0;
end 
// a[ 6 ]
initial
begin
	a[6] = 1'b0;
	a[6] = #80000 1'b1;
	a[6] = #60000 1'b0;
	a[6] = #70000 1'b1;
	a[6] = #140000 1'b0;
	a[6] = #320000 1'b1;
	a[6] = #260000 1'b0;
end 
// a[ 5 ]
initial
begin
	a[5] = 1'b0;
	a[5] = #80000 1'b1;
	a[5] = #270000 1'b0;
	a[5] = #320000 1'b1;
	a[5] = #260000 1'b0;
end 
// a[ 4 ]
initial
begin
	a[4] = 1'b1;
	a[4] = #80000 1'b0;
	a[4] = #60000 1'b1;
	a[4] = #210000 1'b0;
	a[4] = #320000 1'b1;
	a[4] = #260000 1'b0;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b1;
	a[3] = #80000 1'b0;
	a[3] = #60000 1'b1;
	a[3] = #530000 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b1;
	a[2] = #140000 1'b0;
	a[2] = #70000 1'b1;
	a[2] = #70000 1'b0;
	a[2] = #390000 1'b1;
	a[2] = #260000 1'b0;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b1;
	a[1] = #80000 1'b0;
	a[1] = #130000 1'b1;
	a[1] = #140000 1'b0;
	a[1] = #320000 1'b1;
	a[1] = #260000 1'b0;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b1;
	a[0] = #80000 1'b0;
	a[0] = #130000 1'b1;
	a[0] = #70000 1'b0;
	a[0] = #70000 1'b1;
	a[0] = #580000 1'b0;
end 
// b[ 31 ]
initial
begin
	b[31] = 1'b0;
	b[31] = #80000 1'b1;
	b[31] = #130000 1'b0;
	b[31] = #70000 1'b1;
	b[31] = #70000 1'b0;
	b[31] = #80000 1'b1;
	b[31] = #80000 1'b0;
	b[31] = #80000 1'b1;
	b[31] = #80000 1'b0;
	b[31] = #50000 1'b1;
	b[31] = #60000 1'b0;
end 
// b[ 30 ]
initial
begin
	b[30] = 1'b0;
	b[30] = #80000 1'b1;
	b[30] = #130000 1'b0;
	b[30] = #220000 1'b1;
	b[30] = #80000 1'b0;
	b[30] = #210000 1'b1;
	b[30] = #120000 1'b0;
end 
// b[ 29 ]
initial
begin
	b[29] = 1'b0;
	b[29] = #80000 1'b1;
	b[29] = #130000 1'b0;
	b[29] = #220000 1'b1;
	b[29] = #80000 1'b0;
	b[29] = #210000 1'b1;
	b[29] = #120000 1'b0;
end 
// b[ 28 ]
initial
begin
	b[28] = 1'b0;
	b[28] = #80000 1'b1;
	b[28] = #130000 1'b0;
	b[28] = #220000 1'b1;
	b[28] = #80000 1'b0;
	b[28] = #210000 1'b1;
	b[28] = #120000 1'b0;
end 
// b[ 27 ]
initial
begin
	b[27] = 1'b0;
	b[27] = #80000 1'b1;
	b[27] = #130000 1'b0;
	b[27] = #220000 1'b1;
	b[27] = #80000 1'b0;
	b[27] = #210000 1'b1;
	b[27] = #120000 1'b0;
end 
// b[ 26 ]
initial
begin
	b[26] = 1'b0;
	b[26] = #80000 1'b1;
	b[26] = #130000 1'b0;
	b[26] = #220000 1'b1;
	b[26] = #80000 1'b0;
	b[26] = #210000 1'b1;
	b[26] = #120000 1'b0;
end 
// b[ 25 ]
initial
begin
	b[25] = 1'b0;
	b[25] = #80000 1'b1;
	b[25] = #130000 1'b0;
	b[25] = #220000 1'b1;
	b[25] = #80000 1'b0;
	b[25] = #210000 1'b1;
	b[25] = #120000 1'b0;
end 
// b[ 24 ]
initial
begin
	b[24] = 1'b0;
	b[24] = #80000 1'b1;
	b[24] = #130000 1'b0;
	b[24] = #220000 1'b1;
	b[24] = #80000 1'b0;
	b[24] = #210000 1'b1;
	b[24] = #120000 1'b0;
end 
// b[ 23 ]
initial
begin
	b[23] = 1'b0;
	b[23] = #80000 1'b1;
	b[23] = #130000 1'b0;
	b[23] = #220000 1'b1;
	b[23] = #80000 1'b0;
	b[23] = #210000 1'b1;
	b[23] = #120000 1'b0;
end 
// b[ 22 ]
initial
begin
	b[22] = 1'b0;
	b[22] = #80000 1'b1;
	b[22] = #130000 1'b0;
	b[22] = #220000 1'b1;
	b[22] = #80000 1'b0;
	b[22] = #210000 1'b1;
	b[22] = #120000 1'b0;
end 
// b[ 21 ]
initial
begin
	b[21] = 1'b0;
	b[21] = #80000 1'b1;
	b[21] = #130000 1'b0;
	b[21] = #220000 1'b1;
	b[21] = #80000 1'b0;
	b[21] = #210000 1'b1;
	b[21] = #120000 1'b0;
end 
// b[ 20 ]
initial
begin
	b[20] = 1'b0;
	b[20] = #80000 1'b1;
	b[20] = #130000 1'b0;
	b[20] = #220000 1'b1;
	b[20] = #80000 1'b0;
	b[20] = #210000 1'b1;
	b[20] = #120000 1'b0;
end 
// b[ 19 ]
initial
begin
	b[19] = 1'b0;
	b[19] = #80000 1'b1;
	b[19] = #130000 1'b0;
	b[19] = #220000 1'b1;
	b[19] = #80000 1'b0;
	b[19] = #210000 1'b1;
	b[19] = #120000 1'b0;
end 
// b[ 18 ]
initial
begin
	b[18] = 1'b0;
	b[18] = #80000 1'b1;
	b[18] = #130000 1'b0;
	b[18] = #220000 1'b1;
	b[18] = #80000 1'b0;
	b[18] = #210000 1'b1;
	b[18] = #120000 1'b0;
end 
// b[ 17 ]
initial
begin
	b[17] = 1'b0;
	b[17] = #80000 1'b1;
	b[17] = #130000 1'b0;
	b[17] = #220000 1'b1;
	b[17] = #80000 1'b0;
	b[17] = #210000 1'b1;
	b[17] = #120000 1'b0;
end 
// b[ 16 ]
initial
begin
	b[16] = 1'b0;
	b[16] = #80000 1'b1;
	b[16] = #130000 1'b0;
	b[16] = #220000 1'b1;
	b[16] = #80000 1'b0;
	b[16] = #210000 1'b1;
	b[16] = #120000 1'b0;
end 
// b[ 15 ]
initial
begin
	b[15] = 1'b0;
	b[15] = #80000 1'b1;
	b[15] = #130000 1'b0;
	b[15] = #220000 1'b1;
	b[15] = #80000 1'b0;
	b[15] = #210000 1'b1;
	b[15] = #120000 1'b0;
end 
// b[ 14 ]
initial
begin
	b[14] = 1'b0;
	b[14] = #80000 1'b1;
	b[14] = #130000 1'b0;
	b[14] = #220000 1'b1;
	b[14] = #80000 1'b0;
	b[14] = #210000 1'b1;
	b[14] = #120000 1'b0;
end 
// b[ 13 ]
initial
begin
	b[13] = 1'b0;
	b[13] = #80000 1'b1;
	b[13] = #130000 1'b0;
	b[13] = #220000 1'b1;
	b[13] = #80000 1'b0;
	b[13] = #210000 1'b1;
	b[13] = #120000 1'b0;
end 
// b[ 12 ]
initial
begin
	b[12] = 1'b0;
	b[12] = #80000 1'b1;
	b[12] = #130000 1'b0;
	b[12] = #220000 1'b1;
	b[12] = #80000 1'b0;
	b[12] = #210000 1'b1;
	b[12] = #120000 1'b0;
end 
// b[ 11 ]
initial
begin
	b[11] = 1'b0;
	b[11] = #80000 1'b1;
	b[11] = #130000 1'b0;
	b[11] = #220000 1'b1;
	b[11] = #80000 1'b0;
	b[11] = #210000 1'b1;
	b[11] = #120000 1'b0;
end 
// b[ 10 ]
initial
begin
	b[10] = 1'b0;
	b[10] = #80000 1'b1;
	b[10] = #130000 1'b0;
	b[10] = #220000 1'b1;
	b[10] = #80000 1'b0;
	b[10] = #210000 1'b1;
	b[10] = #120000 1'b0;
end 
// b[ 9 ]
initial
begin
	b[9] = 1'b0;
	b[9] = #80000 1'b1;
	b[9] = #130000 1'b0;
	b[9] = #220000 1'b1;
	b[9] = #80000 1'b0;
	b[9] = #210000 1'b1;
	b[9] = #120000 1'b0;
end 
// b[ 8 ]
initial
begin
	b[8] = 1'b0;
	b[8] = #80000 1'b1;
	b[8] = #130000 1'b0;
	b[8] = #220000 1'b1;
	b[8] = #80000 1'b0;
	b[8] = #210000 1'b1;
	b[8] = #120000 1'b0;
end 
// b[ 7 ]
initial
begin
	b[7] = 1'b0;
	b[7] = #80000 1'b1;
	b[7] = #130000 1'b0;
	b[7] = #220000 1'b1;
	b[7] = #80000 1'b0;
	b[7] = #210000 1'b1;
	b[7] = #120000 1'b0;
end 
// b[ 6 ]
initial
begin
	b[6] = 1'b0;
	b[6] = #80000 1'b1;
	b[6] = #130000 1'b0;
	b[6] = #140000 1'b1;
	b[6] = #160000 1'b0;
	b[6] = #160000 1'b1;
	b[6] = #170000 1'b0;
end 
// b[ 5 ]
initial
begin
	b[5] = 1'b1;
	b[5] = #140000 1'b0;
	b[5] = #290000 1'b1;
	b[5] = #80000 1'b0;
	b[5] = #210000 1'b1;
	b[5] = #120000 1'b0;
end 
// b[ 4 ]
initial
begin
	b[4] = 1'b0;
	b[4] = #80000 1'b1;
	b[4] = #60000 1'b0;
	b[4] = #70000 1'b1;
	b[4] = #70000 1'b0;
	b[4] = #150000 1'b1;
	b[4] = #80000 1'b0;
	b[4] = #210000 1'b1;
	b[4] = #120000 1'b0;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
	b[3] = #80000 1'b1;
	b[3] = #60000 1'b0;
	b[3] = #70000 1'b1;
	b[3] = #70000 1'b0;
	b[3] = #150000 1'b1;
	b[3] = #80000 1'b0;
	b[3] = #210000 1'b1;
	b[3] = #120000 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b0;
	b[2] = #210000 1'b1;
	b[2] = #70000 1'b0;
	b[2] = #500000 1'b1;
	b[2] = #60000 1'b0;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b1;
	b[1] = #140000 1'b0;
	b[1] = #70000 1'b1;
	b[1] = #70000 1'b0;
	b[1] = #150000 1'b1;
	b[1] = #80000 1'b0;
	b[1] = #210000 1'b1;
	b[1] = #120000 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b1;
	b[0] = #80000 1'b0;
	b[0] = #270000 1'b1;
	b[0] = #160000 1'b0;
	b[0] = #160000 1'b1;
	b[0] = #170000 1'b0;
end 
endmodule

