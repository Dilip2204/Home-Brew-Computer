//FILE:             dummy_slave.v
//DESCRIPTION:      This file describes a dummy slave device for testing the bus
//                  and bus controller.
//DATA:             2020-10-14
//AUTHOR:           Thimble Liu

//module for dummy slave devices.


module dummy_slave( 
    clk,address, data, request, ready, r_w
);
    input clk, r_w, request;
    input [31:0] address;
    inout [31:0] data;
    output reg ready;


    //dummy memory
    reg [31:0] mem [0:32-1];

    //internal state machine
    reg [ 1:0] state;

    //address range
    reg [31:0] entry_start, entry_end;

    initial 
    begin
        entry_start=32'b0;
        entry_end  =32'b11111;
        state      = 0;
    end

    //selected if request in address range
    reg selected;
    always @(*)
    begin
        if ((address >= entry_start) &(address <=entry_end) &request )
            selected = 1;
        else    selected =0;

    end 
       
    //implement inout data port.
    //if device is selected and the request is a read request, this device
    //will put data onto the bus. In any other condition, the output will be
    //high Z.
    assign data = (selected & ~r_w) ? read :8b'z;

    wire [31:0] read = mem[address];

    always @(posedge clk)
    begin
        if (state == 00) begin
            mem[address] <= data;          
        end
    end

    //the state machine implements the dummy wait cycles and ready signal.
    //one dummy operation needs four cycles.
    always @(posedge clk)
    begin
        if ((state == 2'b00)& selected) begin
            state <=  2'b01;
            ready <=  0;
        end
        //dummy wait cycles .
        else if (state == 2'b01) begin
            state <= 2'b10;
            ready <= 0;
        end
        else if (state == 2'b10) begin
            state <= 2'b11;
            ready <= 0;
        end
        //operation ready
        else if (state == 2'b11) begin
            //return to idle state 
            state <= 2'b00;
            //one cycle ready signal
            ready <= 1;
        end
        else begin 
            state <= 00;
            ready <= 0;
        end
    end






endmodule //dummy_slave


module dummy_master(
    
);


endmodule //dummy_master